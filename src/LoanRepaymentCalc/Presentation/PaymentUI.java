/*
 * Allows the Selection of payment method after choosing an amount and 
 * carries out the selected method of payment before returning to the 
 * LoanMasterList UI
 */
package LoanRepaymentCalc.Presentation;

import LoanRepaymentCalc.domain.*;
import LoanRepaymentCalc.service.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author jake
 */
public class PaymentUI extends javax.swing.JFrame {
    
    //account variables
    LoanSvcCacheImpl loanCache = new LoanSvcCacheImpl();
    AccountSvcCacheImpl accountCache;
    List<Loan> loans = new ArrayList<Loan>();
    double loanPayAmount;
    private Account account = null;
    
    public void setAccount(Account account){
        this.account = account;
    }
    /**
     * Creates new form PaymentUI
     */
    public PaymentUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PayCalcTItleBar = new javax.swing.JLabel();
        PayChoiceTitle = new javax.swing.JLabel();
        ScrollPay = new javax.swing.JScrollPane();
        PayDescriptionFld = new javax.swing.JTextArea();
        payBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        loanType = new javax.swing.JComboBox<>();
        LoanAmountTitle = new javax.swing.JLabel();
        loanAmountFld = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Make A Payment");

        PayCalcTItleBar.setFont(new java.awt.Font("Lohit Telugu", 1, 48)); // NOI18N
        PayCalcTItleBar.setForeground(new java.awt.Color(0, 204, 0));
        PayCalcTItleBar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PayCalcTItleBar.setText("Payment Calculator");

        PayChoiceTitle.setText("Please Choose a Loan Repayment Plan :");

        PayDescriptionFld.setEditable(false);
        PayDescriptionFld.setColumns(20);
        PayDescriptionFld.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        PayDescriptionFld.setRows(5);
        PayDescriptionFld.setText("                                                    Payment Type Decriptions\n\n     Highest Interest Prority will prioritize the loans with the highest interest payments charges\n first. This method helps to ensure do not have high interest loans building up.\n\n\n     Pay While in School - Helps to ensure that you are paying UnSubsidized loans first since\n interest is charged while you are still in school.\n\n\n\n    Standard Payments - Evenly dispurse the amount that you wish to pay between all loans.");
        ScrollPay.setViewportView(PayDescriptionFld);

        payBtn.setText("Make Payment");
        payBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payBtnActionPerformed(evt);
            }
        });

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        loanType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Highest Interest Priority", "Standard Repayment", "Pay While in School" }));
        loanType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loanTypeActionPerformed(evt);
            }
        });

        LoanAmountTitle.setText("Please enter the amount you wish to pay on your loans");

        loanAmountFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loanAmountFldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PayCalcTItleBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LoanAmountTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(330, 330, 330)
                        .addComponent(loanAmountFld, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(PayChoiceTitle)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(loanType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cancelBtn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(payBtn))
                        .addComponent(ScrollPay, javax.swing.GroupLayout.PREFERRED_SIZE, 864, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(76, 76, 76))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(PayChoiceTitle)
                        .addComponent(loanType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cancelBtn)
                        .addComponent(payBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PayCalcTItleBar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(74, 74, 74)))
                .addComponent(ScrollPay, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LoanAmountTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loanAmountFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void payBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payBtnActionPerformed
       
        
        //method level variables
        int currItem = loanType.getSelectedIndex();
        int result = -1;
        
        // finds the index of the current selected loanPaymentTypeFld 
        //calls method to handle payment execution
        
        //interest priority option is selected
        if(currItem == 0 && convertDouble() == true){
            result = JOptionPane.showConfirmDialog(null, 
                    "Are you sure you would like to" +
                    " continue with the Highest Interest Priority option\n" + 
                    " and you wish to pay $" + loanPayAmount + " to your loans" +
                    " you will not be able to alter your choice once made",
                    "Warning", JOptionPane.YES_NO_OPTION);
            if(result == JOptionPane.YES_OPTION){
                interestPay();
            }
                   
        }
        
        //standard payment option is selected
        if(currItem == 1 && convertDouble() == true){
            result = JOptionPane.showConfirmDialog(null, "Are you sure you would like to" +
                   " continue with the Default Payment option\n" +
                   " and you wish to pay $" + loanPayAmount + " to your loans" +
                   " you will not be able to alter your choice once made",
                   "Warning", JOptionPane.YES_NO_OPTION);
            if(result == JOptionPane.YES_OPTION){
                defaultPay();
            }
        }
        //pay while in school option is selected
        if(currItem == 2 && convertDouble() == true){
            result = JOptionPane.showConfirmDialog(null, "Are you sure you would like to" +
                    " continue with the Pay While in school option\n" +
                    " and you wish to pay $" + loanPayAmount + " to your loans" +
                    " you will not be able to alter your choice once made",
                    "Warning", JOptionPane.YES_NO_OPTION);
            if(result == JOptionPane.YES_OPTION){
                schoolPay();
            }       
        }
    }//GEN-LAST:event_payBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        // UI transition
        transition();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void loanTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loanTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_loanTypeActionPerformed

    private void loanAmountFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loanAmountFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_loanAmountFldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PaymentUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PaymentUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PaymentUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PaymentUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PaymentUI().setVisible(true);
            }
        });
    }
    
    
    //loan default payment option
    // divides payment evenly between all loans
    private void defaultPay() {
        //method variables
        loans = account.getLoans();
        double payPerLoan = loanPayAmount / loans.size();
        
        
        //Single loan in the list
        if(loans.size() == 1){
            singleLoan();
        }
        
        //multiple loans in the list
        else{
            for (int i = 0; i <= loans.size() - 1; i++){
                Loan loan = loans.get(i);
                loan.setLoanAmount(loan.getLoanAmount() - payPerLoan);
                //loanCache.update(loan);
            }
        }
        // UI transition
        transition();
    }
    
    //Loan payment for Pay while in School option is chosen 
    //makes larger payments on the unsubsidized loans 
    private void schoolPay(){
        
        //method variables
        int numUnSub = 0;
        double payPerLoanSub = 0;
        double payPerLoanUnsub = 0;
        for (int i=0; i <= loans.size() - 1; i++){
            Loan loan = loans.get(i);
            if (loan.getLoanType().equalsIgnoreCase("unsub")) 
            {
                numUnSub++;
            }
        }
        
        //Handles loan lists with no Unsub loans
        if(numUnSub == 0) defaultPay();
        
        //handling single loan lists
        else if(loans.size() == 1)
        {
            singleLoan();
        }
        
        //standard pay while in school calculations for loan lists longer than
        //one and more than  
        else if(numUnSub >= 1 )
        {
            payPerLoanSub = (.3 * loanPayAmount)/(loans.size() - numUnSub);
            payPerLoanUnsub = (.7 * loanPayAmount)/numUnSub;
            for (int i=0; i <= loans.size() - 1; i++){
                
                Loan loan = loans.get(i);
                
                if (loan.getLoanType().equalsIgnoreCase("unsub")){
                    loan.setLoanAmount(loan.getLoanAmount() - payPerLoanUnsub); 
                }
                
                if (loan.getLoanType().equalsIgnoreCase("sub") ||
                        loan.getLoanType().equalsIgnoreCase("personal")){
                    loan.setLoanAmount(loan.getLoanAmount() - payPerLoanSub); 
                }
            }
            // UI transition
            transition();
        }
   
    }
    
    
    //Loan payments for Highest Interest Paid first Loan payment option
    // pays more to the top three and makes minor payments to the loans
    //That are not in the top 3 highest APR
    private void interestPay(){
        
        
        //method level variables
        loans = account.getLoans();
        double Apr1 = 0;
        double Apr2 = 0;
        double Apr3 = 0;
        double currApr = 0;
        double payAmount = 0;
        Loan loan = null;
        Loan loan1 = null;
        Loan loan2 = null;
        Loan loan3 = null;
        
        //Used for single loan size
        if(loans.size() == 1){
            singleLoan();
        }
        
        
        //used for loan lists that are only two loans 
        else if(loans.size() == 2 ){
            
            loan = loans.get(0);
            loan2 = loans.get(1);
            double payLoan1 = 0;
            double payLoan2 = 0;
            
            
            // setting pay amounts when loan 1 is larger than loan two 
            if(loan.getApr() > loan2.getApr()){
                payLoan1 = .8 * loanPayAmount;
                payLoan2 = .2 * loanPayAmount;
            }
            
            //setting pay amounts when loan 1 is smaller than loan2
            if(loan.getApr() < loan2.getApr()){
                payLoan1 = .2 * loanPayAmount;
                payLoan2 = .8 * loanPayAmount;
            }
            
            //setting pay amounts when two loan APR are equall
            if(loan.getApr() == loan2.getApr()){
                payLoan1 = .5 * loanPayAmount;
                payLoan2 = .5 * loanPayAmount;
            }
            
            //Making payments 
            loan.setLoanAmount(loan.getLoanAmount() - payLoan1);
            loan2.setLoanAmount(loan2.getLoanAmount() - payLoan2);
            
            // UI transition
            transition();
        }
        
        
        //Handles loan lists of size 3 or greater 
        else if(loans.size() >= 3){
            for (int i = 0; i <= loans.size() - 1; i++){
                loan = loans.get(i);
                currApr = loan.getApr();
                if(currApr > Apr1) loan = loan1;
                if(currApr < Apr1 && currApr > Apr2) loan = loan2;
                if(currApr < Apr1 && currApr < Apr2 && currApr > Apr3) loan = loan3;
            }
            for (int i = 0; i <= loans.size() - 1; i++){
                loan = loans.get(i);
                if(loan.getId() == loan1.getId()){
                    try
                    {
                        payAmount = .5 * loanPayAmount;
                    }catch(Exception e){
                        System.out.println("Loan Amount Issue");
                    }
                    loan.setLoanAmount(loan.getLoanAmount() - payAmount);
                }
                if(loan.getId() == loan2.getId()){
                    try
                    {
                        payAmount = .3 * loanPayAmount;
                    }catch(Exception e){
                        System.out.println("Loan Amount Issue");
                    }
                    loan.setLoanAmount(loan.getLoanAmount() - payAmount);
                }
                
                //3 loans in the list
                if(loans.size() == 3 && loan.getId() == loan3.getId()){
                        try
                        {
                            payAmount = .2 * loanPayAmount;
                        }catch(Exception e){
                            System.out.println("Loan Amount Issue");
                        }
                        loan.setLoanAmount(loan.getLoanAmount() - payAmount);                                       
                }
                
                //More than 3 loans in the list
                if(loans.size() > 3 && loan.getId() == loan3.getId()){
                        try
                        {
                            payAmount = .1 * loanPayAmount;
                        }catch(Exception e){
                            System.out.println("Loan Amount Issue");
                        }
                        loan.setLoanAmount(loan.getLoanAmount() - payAmount);                                       
                }
                
                
                //Handles all loans not in the top 3 APR
                if(loan.getId() != loan1.getId() && 
                        loan.getId() != loan2.getId() &&
                        loan.getId() != loan3.getId())
                {
                    try
                    {
                        payAmount = (.1 * loanPayAmount)/(loans.size()-3);
                    }catch(Exception e){
                        System.out.println("Loan Amount Issue");
                    }
                    loan.setLoanAmount(loan.getLoanAmount() - payAmount);
                }
                
            }
            
        }
        
        // UI transition
        transition();
    }
    
    //Same payment is made for all single loans processes payment when there
    //is only one loan in the list
    private void singleLoan(){
        
        loans = account.getLoans();
        Loan loan = loans.get(0);
        loan.setLoanAmount(loan.getLoanAmount() - loanPayAmount);
        
        // UI transition
        transition();
    } 
    
    
    //converts string amount loan to double 
    private boolean convertDouble(){
        try{
            loanPayAmount = Double.parseDouble(loanAmountFld.getText());
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Invalid Loan Amount" +
                    " Please enter a valid number",
                    "Error", JOptionPane.ERROR_MESSAGE);
            System.out.println("Cannot Convert to double");
            return false;
        }
        if(loanPayAmount <= 0){
            JOptionPane.showMessageDialog(this, "Invalid Loan Amount" +
                    " You must enter a number greater than 0",
                    "Error", JOptionPane.ERROR_MESSAGE);
            System.out.println("Loam Amount Invalid must be > 0");
            return false;
        }
        return true;
    }
    // payment has been made transition back to ml UI with updated results
    private void transition(){
        this.setVisible(false);
        LoanMasterListUI loanML = new LoanMasterListUI();
        loanML.setAccount(account);
        loanML.setVisible(true);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LoanAmountTitle;
    private javax.swing.JLabel PayCalcTItleBar;
    private javax.swing.JLabel PayChoiceTitle;
    private javax.swing.JTextArea PayDescriptionFld;
    private javax.swing.JScrollPane ScrollPay;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JTextField loanAmountFld;
    private javax.swing.JComboBox<String> loanType;
    private javax.swing.JButton payBtn;
    // End of variables declaration//GEN-END:variables
}
